package amf.plugins.document.webapi.contexts
import amf.core.model.domain.Shape
import amf.core.remote.Vendor
import amf.plugins.document.webapi.contexts.parser.{OasLikeSpecVersionFactory, OasLikeWebApiContext}
import amf.plugins.document.webapi.parser.spec.SpecSyntax
import amf.validation.DialectValidations.ClosedShapeSpecification
import org.yaml.model.{YMap, YNode, YPart, YScalar}

class CustomClosedShapeContextDecorator(decorator: OasLikeWebApiContext, syntaxOverride: SpecSyntax)
    extends OasLikeWebApiContext(
      decorator.loc,
      decorator.refs,
      decorator.options,
      decorator,
      Some(decorator.declarations)
    ) {
  override val syntax: SpecSyntax = syntaxOverride
  override val vendor: Vendor     = decorator.vendor

  override def link(node: YNode): Either[String, YNode] = decorator.link(node)

  override def ignore(shape: String, property: String): Boolean = decorator.ignore(shape, property)

  override def autoGeneratedAnnotation(s: Shape): Unit = decorator.autoGeneratedAnnotation(s)

  override val factory: OasLikeSpecVersionFactory = decorator.factory

  override def throwClosedShapeError(node: String, message: String, entry: YPart): Unit =
    eh.warning(ClosedShapeSpecification, node, message, entry)

  override def makeCopy(): OasLikeWebApiContext = decorator.makeCopy()
}
