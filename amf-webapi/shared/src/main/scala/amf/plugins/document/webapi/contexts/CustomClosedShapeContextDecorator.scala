package amf.plugins.document.webapi.contexts
import amf.core.model.domain.Shape
import amf.core.remote.Vendor
import amf.plugins.document.webapi.contexts.parser.{OasLikeSpecVersionFactory, OasLikeWebApiContext}
import amf.plugins.document.webapi.parser.spec.SpecSyntax
import amf.validation.DialectValidations.ClosedShapeSpecification
import org.yaml.model.{YMap, YMapEntry, YNode, YPart, YScalar}

class CustomClosedShapeContextDecorator(decorated: OasLikeWebApiContext, syntaxOverride: SpecSyntax)
    extends OasLikeWebApiContext(
      decorated.loc,
      decorated.refs,
      decorated.options,
      decorated,
      Some(decorated.declarations)
    ) {
  override val syntax: SpecSyntax = syntaxOverride
  override val vendor: Vendor     = decorated.vendor

  override def link(node: YNode): Either[String, YNode] = decorated.link(node)

  override def autoGeneratedAnnotation(s: Shape): Unit = decorated.autoGeneratedAnnotation(s)

  override val factory: OasLikeSpecVersionFactory = decorated.factory

  def specificClosedShape(node: String, shape: String, ast: YMap): Unit = closedShape(node, ast, shape, syntaxOverride)

  override def makeCopy(): OasLikeWebApiContext = decorated.makeCopy()
}
